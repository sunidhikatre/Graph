
Initialize a queue starting with node 0 and a visited array to track visited nodes.
Dequeue nodes from the queue, add them to the result list, and enqueue their unvisited neighbors.
Continue until the queue is empty and return the result list containing the BFS traversal.

class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        Queue q = new LinkedList<>();
        ArrayList<Integer> finalRes = new ArrayList<>(); 
        q.add(0);
        // Use a boolean array for visited nodes
        int[] visited = new int[V];
        visited[0] = 1;
        
        while(!q.isEmpty()) {
            int node = (int)q.poll();
            finalRes.add(node);
            
            //process neighbouring nodes
            for(int adjNode : adj.get(node)) {
                if(visited[adjNode] != 1) {
                    visited[adjNode] = 1;
                    q.add(adjNode);
                }
            }
        }
        return finalRes;
    }
}
