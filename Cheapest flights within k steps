Build the graph using an adjacency list from the flights data.
Use BFS with a queue to explore nodes, tracking the current node, cost, and stops, while updating the minimum cost to each node.
Limit the stops to k, and return the minimum cost to the destination, or -1 if no valid path is found.


class Pair {
    int node;
    int distance;
    Pair(int node, int distance) {
        this.node = node;
        this.distance = distance;
    }
}

class Tuple {
    int stops;
    int node;
    int distance;
    Tuple(int stops, int node, int distance) {
        this.stops = stops;
        this.node = node;
        this.distance = distance;
    }
}
class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        int[] dist= new int[n];
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        Queue<Tuple> q = new LinkedList<>();

        for(int i = 0; i< n; i++) {
            adj.add(new ArrayList<>());
            dist[i] = Integer.MAX_VALUE;
        }

         // Start with the source node
        q.add(new Tuple(0, src, 0));
        dist[src] = 0;  // Distance to the source is zero
        
        for(int i = 0; i < flights.length; i++) {
            adj.get(flights[i][0]).add(new Pair(flights[i][1], flights[i][2]));
        }

        while(!q.isEmpty()) {
            Tuple current = q.poll();
            int currentStops = current.stops;
            int currentNode = current.node;
            int currentDistance = current.distance;

            if(currentStops > k) {
                continue;
            }

            for(Pair iter :adj.get(currentNode)) {
                int adjNode = iter.node;
                int adjDist = iter.distance;

                if(currentDistance + adjDist < dist[adjNode]) {
                    dist[adjNode] = currentDistance + adjDist;
                    q.add(new Tuple(currentStops + 1, adjNode, dist[adjNode]));
                }
            }
        }
        if(dist[dst] != Integer.MAX_VALUE) {
            return dist[dst];
        } else {
            return -1;
        }
        
    }
}
