Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.

 public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int V = numCourses;
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());  
        }

        for(int i = 0; i < prerequisites.length; i++) {
              int u = prerequisites[i][1];
              int v = prerequisites[i][0];
              adj.get(u).add(v);
        }

              
        int[] indegree = new int[V];
        int current = 0;
        
        for(int i=0; i<V; i++){
            for(int adjNode : adj.get(i)) {
                indegree[adjNode]++;
            }
        }
        
        Queue<Integer> q = new LinkedList<>();
        for(int i=0; i<V; i++) {
            if(indegree[i] == 0) {
                q.add(i);
            }
        }
        
        int cnt = 0;
        
        while(!q.isEmpty()) {
            int node = q.poll();
            cnt++;
            for(int adjNode : adj.get(node)) {
                indegree[adjNode]--;
                if(indegree[adjNode] == 0) {
                    q.add(adjNode);
                }
            }
        }
        
        if(cnt == V) {
            return true;
        }
        return false;


    }
