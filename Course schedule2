Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].


class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int V = numCourses;

        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());  
        }

        for(int i = 0; i < prerequisites.length; i++) {
              int u = prerequisites[i][1];
              int v = prerequisites[i][0];
              adj.get(u).add(v);
        }

        int[] indegree = new int[V];
        int[] topo = new int[V];
        int current = 0;
        int cnt = 0;
        
        for(int i=0; i<V; i++){
            for(int adjNode : adj.get(i)) {
                indegree[adjNode]++;
            }
        }
        
        Queue<Integer> q = new LinkedList<>();
        for(int i=0; i<V; i++) {
            if(indegree[i] == 0) {
                q.add(i);
            }
        }
        
        while(!q.isEmpty()) {
            int node = q.poll();
            topo[current++] = node;
            cnt ++;
            for(int adjNode : adj.get(node)) {
                indegree[adjNode]--;
                if(indegree[adjNode] == 0) {
                    q.add(adjNode);
                }
            }
        }
        if(cnt == V)
            return topo;
        else 
            return new int[]{};
    }
}
