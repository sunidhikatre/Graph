A node is a terminal node if there are no outgoing edges.
A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).

Reverse the graph and calculate the indegree for each node.
Use a queue to perform a topological sort, processing nodes with zero indegree and reducing indegree for adjacent nodes.
Collect all processed nodes (safe nodes), sort them, and return the result.

class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int V= graph.length;
        List<List<Integer>> adjRev = new ArrayList<>();

        for(int i=0; i<V;i++) {
            adjRev.add(new ArrayList<>());
        }

        int[] indegree = new int[V];

        for(int i=0; i<V; i++) {
            for(int it : graph[i]) {
                adjRev.get(it).add(i);
                indegree[i]++;
            }
        }

        Queue<Integer> q = new LinkedList<>();
        List<Integer> safeNodes = new ArrayList<>();

        for(int i=0; i<V; i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }

        while(!q.isEmpty()){
            int node = q.poll();
            safeNodes.add(node);
            for(int i : adjRev.get(node)) {
                indegree[i]--;
                if(indegree[i] == 0) {
                    q.add(i);
                }
            }
        }

        Collections.sort(safeNodes);
        return safeNodes;

    }
}
