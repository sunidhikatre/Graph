Use Dijkstraâ€™s algorithm to find the shortest paths from the source to all other nodes.
For each node, update the number of ways to reach it using dynamic programming, while exploring its neighbors.
If another shortest path to a node is found, add the number of ways from the current node, and return the total ways to reach the destination modulo (10^9+7)


class Pair {
    int node;
    int distance;
    Pair(int node, int distance) {
        this.node = node;
        this.distance =distance;
    }
}
class Solution {
    public int countPaths(int n, int[][] roads) {

        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        int []dist = new int[n];
        int[] ways = new int[n];
        long mod = (int)(1e9 + 7);

         for(int i = 0; i< n; i++) {
            adj.add(new ArrayList<>());
            dist[i] = Integer.MAX_VALUE;
        }

        for(int i = 0; i < roads.length; i++) {
            adj.get(roads[i][0]).add(new Pair(roads[i][1], roads[i][2]));
            adj.get(roads[i][1]).add(new Pair(roads[i][0], roads[i][2]));
        }

        PriorityQueue<Pair> pq = new PriorityQueue<>((x, y) -> x.distance - y.distance);

        pq.add(new Pair(0, 0));
        ways[0] = 1;
        dist[0] = 0;

        while(!pq.isEmpty()) {
            Pair current = pq.poll();
            int currentNode = current.node;
            int currentDistance = current.distance;

            for(Pair iter :adj.get(currentNode)) {
                int adjNode = iter.node;
                int adjDist = iter.distance;

                if(currentDistance + adjDist < dist[adjNode]) {
                    dist[adjNode] = currentDistance + adjDist;
                    pq.add(new Pair( adjNode, dist[adjNode]));
                    ways[adjNode] = ways[currentNode];
                } else if(currentDistance + adjDist == dist[adjNode]) {
                    ways[adjNode] = ways[adjNode] + ways[currentNode];
                }
            }

        }
        
        // Return the number of ways to reach the destination (node n-1)
        return (int)(ways[n - 1] % mod);

    }
}
