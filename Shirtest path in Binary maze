Approach in 3 Lines:
Initialization: Create a distance matrix to track the shortest path from the source to each cell and initialize a queue with the source cell.
BFS Traversal: Use a queue to explore the grid in four possible directions (up, down, left, right) while updating distances and checking if the destination is reached.
Termination: If the destination is found during exploration, return the distance; if the queue is exhausted without finding the destination, return -1.

class Pair {
    int src;
    int dest;
    int dist;
    
    Pair(int src, int dest, int dist) {
        this.src= src;
        this.dest = dest;
        this.dist =dist;
    }
}
class Solution {

    int shortestPath(int[][] grid, int[] source, int[] destination) {
        if(source[0] == destination[0] && source[1] == destination[1] ) {
            return 0;
        }
        // Your code here
        int m = grid.length;
        int n = grid[0].length;
        int[][] distance = new int[m][n];
        
        for(int i=0; i< m; i++) {
            for(int j=0; j<n; j++)
            {
                distance[i][j] = Integer.MAX_VALUE;
            }
        }
        
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(source[0], source[1], 0));
        distance[source[0]][source[1]] = 0;
        
        int[][] directions = {{-1,0}, {1,0}, {0,-1}, {0,1}};
        
        while(!q.isEmpty()) {
            Pair current = q.peek();
            int currentSrc = current.src;
            int currentDest = current.dest;
            int currentDist = current.dist;
            
            q.poll();
            
            for(int[] dir : directions) {
                int newRow = currentSrc + dir[0];
                int newCol = currentDest + dir[1];
                
                if(newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && grid[newRow][newCol] == 1
                && currentDist + 1 < distance[newRow][newCol]){
                    distance[newRow][newCol] = currentDist + 1;
                    if(newRow == destination[0] && newCol == destination[1]) {
                        return currentDist+1;
                    }
                    q.add(new Pair(newRow, newCol, distance[newRow][newCol]));
                }
            }
            
        }
        return -1;
    }
}

