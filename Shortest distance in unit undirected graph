Use BFS

class Solution {
    
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        // Code here
        List<List<Integer>> adj = new ArrayList<>();
        
        for(int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        
        for(int i = 0; i < m; i++) {
            adj.get(edges[i][0]).add(edges[i][1]);
            adj.get(edges[i][1]).add(edges[i][0]);
        }
        
        Queue<Integer> q = new LinkedList<>();
        int[] dist = new int[n];
        for(int i=0; i<n; i++) {
            dist[i]= Integer.MAX_VALUE;
        }
        
        dist[src]=0;
        q.add(src);
        
        while(!q.isEmpty()) {
            int node = q.poll();
            for(int adjNode : adj.get(node)) {
                if(dist[adjNode] > dist[node] + 1) {
                    dist[adjNode] = dist[node]+1;
                    q.add(adjNode);
                }
            }
        }
        
        for(int i=0; i<n; i++) {
            if(dist[i] == Integer.MAX_VALUE){
                dist[i]=-1;
            }
        }
        return dist;
    }
}
