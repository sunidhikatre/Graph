Replace all 'Os' with 'X' if surrounded by X on all side
Consider the case where all boundary o's connected if to inner o's will not be converted
Initialization: Initialize the matrix dimensions m and n, and create a visited matrix to track visited cells.

DFS from Borders: Perform DFS from all 'O' cells on the borders (first and last rows, first and last columns), marking connected 'O' cells as visited.

Flip Cells: Traverse the matrix again; flip 'O' cells to 'X' if they are not visited (indicating they are surrounded by 'X' cells).

class Solution {
    public void solve(char[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] visited = new int[m][n];

        for(int i = 0; i < m; i++) {
            //first column
            if(board[i][0] == 'O' && visited[i][0] == 0) {
                dfs(i, 0, visited, board, m, n);
            }
            //last column
            if(board[i][n-1] == 'O' && visited[i][n-1] == 0) {
                dfs(i, n-1, visited, board, m, n);
            }
        }

        for(int j=0; j < n; j++) {
            //first row
            if(board[0][j] == 'O' && visited[0][j] == 0) {
                dfs(0, j, visited, board, m, n);
            }
            //last row
            if(board[m-1][j] == 'O' && visited[m-1][j] == 0) {
                dfs(m-1, j, visited, board, m, n);
            }
        }

        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(board[i][j] == 'O' && visited[i][j] == 0){
                    board[i][j] = 'X';
                }
            }
        }
    }

    public void dfs(int row, int col, int[][] visited, char[][] board, int m, int n) {
        visited[row][col] = 1;
        int[][] directions = {{-1, 0}, {1,0}, {0,-1},{0,1}};
        for(int[] dir: directions) {
            int newRow = row + dir[0];
            int newCol = col + dir[1];

            if(newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && visited[newRow][newCol] == 0 && board[newRow][newCol] == 'O') {
                
                dfs(newRow, newCol, visited, board, m, n);
            } 
        }

    }
}
