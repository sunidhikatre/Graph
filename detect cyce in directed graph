use topological sort and if count is not equal to vertices then there is cycle


class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        
        int[] indegree = new int[V];
        int current = 0;
        
        for(int i=0; i<V; i++){
            for(int adjNode : adj.get(i)) {
                indegree[adjNode]++;
            }
        }
        
        Queue<Integer> q = new LinkedList<>();
        for(int i=0; i<V; i++) {
            if(indegree[i] == 0) {
                q.add(i);
            }
        }
        
        int cnt = 0;
        
        while(!q.isEmpty()) {
            int node = q.poll();
            cnt++;
            for(int adjNode : adj.get(node)) {
                indegree[adjNode]--;
                if(indegree[adjNode] == 0) {
                    q.add(adjNode);
                }
            }
        }
        
        if(cnt == V) {
            return false;
        }
        return true;
        
    }
}
